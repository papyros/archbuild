# -*- python -*-
# ex: set syntax=python:
#
# Archbuild - Buildbot configuration for Papyros
#
# Copyright (C) 2015 Michael Spencer <sonrisesoftware@gmail.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

from buildbot.plugins import *
from archbuild import common, pkgbuild, ostree, diskimage

# Build master configuration
c = BuildmasterConfig = {}

####### MASTER LOCKS

ostree_lock = util.MasterLock("ostree")

####### BUILDSLAVES

# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a unique slave name and password.  The same
# slave name and password must be configured on the slave.

from buildbot.buildslave import BuildSlave

c['slaves'] = [BuildSlave('slave1', 'random-password')]

# 'protocols' contains information about protocols which master will use for
# communicating with slaves.
# You must define at least 'port' option that slaves could connect to your master
# with this protocol.
# 'port' must match the value configured into the buildslaves (with their
# --master option)

c['protocols'] = {'pb': {'port': 9989}}

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the Papyros repository.

from archbuild.common.changes.gitpoller import GitPoller

c['change_source'] = []

# Papyros channel repository
# TODO: Add the stable repository as well
c['change_source'].append(GitPoller(
        'git://github.com/papyros/repository.git',
        workdir='gitpoller/repository', branches=['testing'],
        pollAtLaunch=True, pollinterval=300,
        ignoredAuthors=['Buildbot <buildbot@papyros.io>']))

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.

c['schedulers'] = []

# Every night at 3 AM, build the repository and publish an OSTree commit
c['schedulers'].append(schedulers.Nightly(name='nightly',
                            branch='testing',
                            builderNames=['nightly'],
                            hour=3,
                            minute=0,
                            reason='Nightly build'))

# Rebuild packages when a change is submitted
c['schedulers'].append(schedulers.SingleBranchScheduler(
                            name="checkin",
                            change_filter=util.ChangeFilter(branch='testing'),
                            treeStableTimer=None,
                            builderNames=['full_build'],
                            reason='Configuration changed'))

# Manually trigger a rebuild of the package repository
c['schedulers'].append(schedulers.ForceScheduler(
                            name="manual",
                            builderNames=['repository_i686', 'repository_x86_64',
                                          'ostree_i686', 'ostree_x86_64',
                                          'diskimage_i686', 'diskimage_x86_64',
                                          'full_build']))

# Triggers to build the package repository and OSTree repository as part of the nightly builds
c['schedulers'].append(schedulers.Triggerable(name="packages",
                builderNames=["repository_i686", "repository_x86_64"]))
c['schedulers'].append(schedulers.Triggerable(name="ostree",
                builderNames=["ostree_i686", "ostree_x86_64"]))
c['schedulers'].append(schedulers.Triggerable(name="diskimage",
                builderNames=["diskimage_i686", "diskimage_x86_64"]))

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which slaves can execute them.  Note that any particular build will
# only take place on one slave.

from buildbot.process.factory import BuildFactory
from buildbot.steps.source.git import Git

# Factory for repository builds
from buildbot.config import BuilderConfig

c['builders'] = []

repository=Git(repourl='git@github.com:papyros/repository.git', mode='incremental')

# Package Repository
for arch in ("i686", "x86_64"):
    c['builders'].append(util.BuilderConfig(name="repository_{}".format(arch),
          slavenames=["slave1"],
          factory=pkgbuild.RepositoryFactory([repository], arch=arch)))

# OSTree Repository
for arch in ("i686", "x86_64"):
    c['builders'].append(util.BuilderConfig(name="ostree_{}".format(arch),
          slavenames=["slave1"],
          factory=ostree.RepositoryFactory([repository], arch=arch,ostree_lock=ostree_lock)))

# Disk Images Repository
for arch in ("i686", "x86_64"):
    c['builders'].append(util.BuilderConfig(name="diskimage_{}".format(arch),
          slavenames=["slave1"],
          factory=diskimage.DiskImageFactory([repository], arch=arch)))

# Nightly builds of the package repository and the OSTree repository
nightly_factory = util.BuildFactory()
nightly_factory.addStep(steps.Trigger(schedulerNames=['packages'],
                                      waitForFinish=True))
nightly_factory.addStep(steps.Trigger(schedulerNames=['ostree'],
                                      waitForFinish=True))
c['builders'].append(util.BuilderConfig(name="nightly",
        slavenames=["slave1"],
        factory=nightly_factory))

# Full build of everything. Packages, OSTree, and eventually ISOs and more
full_build_factory = util.BuildFactory()
full_build_factory.addStep(steps.Trigger(schedulerNames=['packages'],
                                      waitForFinish=True))
#full_build_factory.addStep(steps.Trigger(schedulerNames=['ostree'],
#                                      waitForFinish=True))
# full_build_factory.addStep(steps.Trigger(schedulerNames=['diskimage'],
#                                       waitForFinish=True))
c['builders'].append(util.BuilderConfig(name="full_build",
        slavenames=["slave1"],
        factory=full_build_factory))

####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = "Papyros"
c['titleURL'] = "http://papyros.io"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://dash.papyros.io:8020/"

# minimalistic config to activate new web UI
from buildbot.www import auth
c['www'] = dict(port=8020,
                plugins=dict(waterfall_view={}, console_view={}),
                auth=auth.UserPasswordAuth([('sonrisesoftware@gmail.com', 'random-pass')]))

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
}
